<?php

namespace MToolkit\Core;

require_once __DIR__ . '/../../Core/MDataType.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-10-10 at 13:24:05.
 */
class MDataTypeTest extends \PHPUnit_Framework_TestCase
{
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers MToolkit\Core\MDataType::getType
     * @todo   Implement testGetType().
     */
    public function testGetType()
    {
        $this->assertEquals( MDataType::BOOLEAN, MDataType::getType( true ) );
        $this->assertEquals( MDataType::FLOAT, MDataType::getType( floatval(1) ) );
        $this->assertEquals( MDataType::INT, MDataType::getType( 1 ) );
        $this->assertEquals( MDataType::NULL, MDataType::getType( null ) );
        $this->assertEquals( MDataType::OBJECT, MDataType::getType( new \stdClass() ) );
        $this->assertEquals( MDataType::RESOURCE, MDataType::getType( mysql_connect() ) );
        $this->assertEquals( MDataType::STRING, MDataType::getType( "cccc" ) );
        $this->assertEquals( MDataType::__ARRAY, MDataType::getType( array(1,2) ) );
    }

    /**
     * @covers MToolkit\Core\MDataType::mustBeInt
     * @todo   Implement testMustBeInt().
     */
    public function testMustBeInt()
    {
        MDataType::mustBeInt(1);
                
        try
        {
            MDataType::mustBeInt("");    
        }
        catch(\Exception $ex)
        {
            
        }
    }

    /**
     * @covers MToolkit\Core\MDataType::mustBeLong
     * @todo   Implement testMustBeLong().
     */
//    public function testMustBeLong()
//    {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//                'This test has not been implemented yet.'
//        );
//    }

    /**
     * @covers MToolkit\Core\MDataType::mustBeBoolean
     * @todo   Implement testMustBeBoolean().
     */
    public function testMustBeBoolean()
    {
        MDataType::mustBeBoolean(true);
                
        try
        {
            MDataType::mustBeBoolean("");    
        }
        catch(\Exception $ex)
        {
            
        }
    }

    /**
     * @covers MToolkit\Core\MDataType::mustBeFloat
     * @todo   Implement testMustBeFloat().
     */
    public function testMustBeFloat()
    {
        MDataType::mustBeFloat(floatval(1));
                
        try
        {
            MDataType::mustBeFloat("");    
        }
        catch(\Exception $ex)
        {
            
        }
    }

    /**
     * @covers MToolkit\Core\MDataType::mustBeDouble
     * @todo   Implement testMustBeDouble().
     */
//    public function testMustBeDouble()
//    {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//                'This test has not been implemented yet.'
//        );
//    }

    /**
     * @covers MToolkit\Core\MDataType::mustBeString
     * @todo   Implement testMustBeString().
     */
    public function testMustBeString()
    {
        MDataType::mustBeString("a");
                
        try
        {
            MDataType::mustBeString(1);    
        }
        catch(\Exception $ex)
        {
            
        }
    }

    /**
     * @covers MToolkit\Core\MDataType::mustBeNull
     * @todo   Implement testMustBeNull().
     */
    public function testMustBeNull()
    {
        MDataType::mustBeNull(null);
                
        try
        {
            MDataType::mustBeNull("");    
        }
        catch(\Exception $ex)
        {
            
        }
    }

    /**
     * @covers MToolkit\Core\MDataType::mustBeNullableInt
     * @todo   Implement testMustBeNullableInt().
     */
    public function testMustBeNullableInt()
    {
        MDataType::mustBeNullableInt(1);
        MDataType::mustBeNullableInt(null);
                
        try
        {
            MDataType::mustBeNullableInt("");    
        }
        catch(\Exception $ex)
        {
            
        }
    }

    /**
     * @covers MToolkit\Core\MDataType::mustBeNullableLong
     * @todo   Implement testMustBeNullableLong().
     */
//    public function testMustBeNullableLong()
//    {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//                'This test has not been implemented yet.'
//        );
//    }

    /**
     * @covers MToolkit\Core\MDataType::mustBeNullableBoolean
     * @todo   Implement testMustBeNullableBoolean().
     */
    public function testMustBeNullableBoolean()
    {
        MDataType::mustBeNullableBoolean(true);
        MDataType::mustBeNullableBoolean(null);
                
        try
        {
            MDataType::mustBeNullableBoolean("");    
        }
        catch(\Exception $ex)
        {
            
        }
    }

    /**
     * @covers MToolkit\Core\MDataType::mustBeNullableFloat
     * @todo   Implement testMustBeNullableFloat().
     */
    public function testMustBeNullableFloat()
    {
        MDataType::mustBeNullableFloat(floatval(1));
        MDataType::mustBeNullableFloat(null);
                
        try
        {
            MDataType::mustBeNullableFloat("");    
        }
        catch(\Exception $ex)
        {
            
        }
    }

    /**
     * @covers MToolkit\Core\MDataType::mustBeNullableDouble
     * @todo   Implement testMustBeNullableDouble().
     */
//    public function testMustBeNullableDouble()
//    {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//                'This test has not been implemented yet.'
//        );
//    }

    /**
     * @covers MToolkit\Core\MDataType::mustBeNullableString
     * @todo   Implement testMustBeNullableString().
     */
    public function testMustBeNullableString()
    {
        MDataType::mustBeNullableString("s");
        MDataType::mustBeNullableString(null);
                
        try
        {
            MDataType::mustBeNullableString(1);    
        }
        catch(\Exception $ex)
        {
            
        }
    }

}
